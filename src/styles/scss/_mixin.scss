@mixin bordered($color:$border-color,$direction:a,$px:1px,$type:solid) {
  @if $direction == t {
    border-top: $px $color $type;
  } @else
  if $direction == r {
    border-right: $px $color $type;
  } @else
  if $direction == b {
    border-bottom: $px $color $type;
  } @else
  if $direction == l {
    border-left: $px $color $type;
  } @else
  if $direction == x {
    border-left: $px $color $type;
    border-right: $px $color $type;
  } @else
  if $direction == y {
    border-top: $px $color $type;
    border-bottom: $px $color $type;
  } @else {
    border: $px $color $type;
  }
}
@mixin btn-min-width($width:100px) {
  min-width: 100px;
}
@mixin button-variant-gradient($start-color: #ffffff, $mid-color:#f9f9f9,$color-stop:76%,$end-color:$mid-color, $border:darken($end-color, 5.5%), $hover-background: darken($end-color, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($end-color, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($end-color);
  @include gradient-y-three-colors($start-color, $mid-color, $color-stop, $end-color);
  border-color: $border;
  @include box-shadow($btn-box-shadow);
  @include hover {
    color: color-yiq($hover-background);
    @include gradient-y-three-colors(darken($start-color, 2.5%), darken($mid-color, 2.5%), $color-stop, $hover-background);
    border-color: $hover-border;
  }

  &.focus,
  &:focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }
  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($end-color);
    background-color: $end-color;
    border-color: $border;
  }

  &:not(:disabled):not(.disabled).active,
  &:not(:disabled):not(.disabled):active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

%scrollbar {
  &::-webkit-scrollbar {
    width: 5px;
  }
  /* Track */
  &::-webkit-scrollbar-track {
    // border-radius: 10px;
    -webkit-box-shadow: none;
  }
  /* Handle */
  &::-webkit-scrollbar-thumb {
    border-radius: 5px;
    background: rgba(map-get($primary, 'color'), 0.8);
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);
  }

  &::-webkit-scrollbar-thumb:window-inactive {
    background: rgba(map-get($primary, 'color'), 0.4);
  }
}
@mixin top-right-btn ($right:0,$size:1.5rem,$padding:0.25rem,$hover-background-color:transparent) {
  position: absolute;
  top: 0;
  right: $right;
  padding: $padding;
  font-size: $size;
  user-select: none;
  cursor: pointer;
  @include border-radius($border-radius);

  &:hover {
    background-color: $hover-background-color;
  }
}
@mixin panel {
  @include border-radius($border-radius);
  @include box-shadow($box-shadow);
}
@mixin ratio2 {
  @media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2) {
    @content;
  }
}
@mixin ratio3 {
  @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3) {
    @content;
  }
}
@mixin gutters($container-pading-x:30rpx, $row-margin-x:-30rpx, $col-padding-x:30rpx,$class:true) {
  > .container {
    @if $class == true {
      padding-left: $container-pading-x;
      padding-right: $container-pading-x;

      .row {
        margin-left: $row-margin-x;
        margin-right: $row-margin-x;

        > .col* {
          padding-left: $col-padding-x;
          padding-right: $col-padding-x;
        }
      }
      @content;
    } @else {
      &.#{$class} {
        padding-left: $container-pading-x;
        padding-right: $container-pading-x;

        .row {
          margin-left: $row-margin-x;
          margin-right: $row-margin-x;

          > .col,
           > .col-10,
           > .col-11,
           > .col-12,
           > .col-2,
           > .col-3,
           > .col-4,
           > .col-5,
           > .col-6,
           > .col-7,
           > .col-8,
           > .col-9,
          > .col-1 {
            padding-left: $col-padding-x;
            padding-right: $col-padding-x;
          }
        }
        @content;
      }
    }
  }
}

@mixin divider() {
  &::before {
    content: '';
    display: block;
    @include bordered($border-color, l, 2rpx);
    height: 100%;
    width: 2rpx;
    position: absolute;
    top: 0;
    left: 0;
    transform: scaleY(0.45);
  }
  &:first-of-type::before {
    border-left-color: transparent;
  }
}

@mixin caret-down {
  border-top: $caret-width solid;
  border-right: $caret-width solid transparent;
  border-bottom: 0;
  border-left: $caret-width solid transparent;
}

@mixin caret-up {
  border-top: 0;
  border-right: $caret-width solid transparent;
  border-bottom: $caret-width solid;
  border-left: $caret-width solid transparent;
}

@mixin caret-right {
  border-top: $caret-width solid transparent;
  border-bottom: $caret-width solid transparent;
  border-left: $caret-width solid;
}

@mixin caret-left {
  border-top: $caret-width solid transparent;
  border-right: $caret-width solid;
  border-bottom: $caret-width solid transparent;
}

@mixin caret($direction: down) {
  @if $enable-caret {
    &::after {
      display: inline-block;
      width: 0;
      height: 0;
      margin-left: $caret-width * .85;
      vertical-align: $caret-width * .85;
      content: "";
      @if $direction == down {
        @include caret-down;
      } @else if $direction == up {
        @include caret-up;
      } @else if $direction == right {
        @include caret-right;
      }
    }

    @if $direction == left {
      &::after {
        display: none;
      }

      &::before {
        display: inline-block;
        width: 0;
        height: 0;
        margin-right: $caret-width * .85;
        vertical-align: $caret-width * .85;
        content: "";
        @include caret-left;
      }
    }

    &:empty::after {
      margin-left: 0;
    }
  }
}
